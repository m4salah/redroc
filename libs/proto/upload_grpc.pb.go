// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: libs/proto/upload.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploadPhotoClient is the client API for UploadPhoto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadPhotoClient interface {
	// RPC for upload a photo to the image database
	Upload(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// RPC for create hashtag-image mapping in the metadata database
	CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*CreateMetadataResponse, error)
	// RPC triggered if the image uploaded (event)
	ImageUploaded(ctx context.Context, in *ImageUploadedRequest, opts ...grpc.CallOption) (*ImageUploadedResponse, error)
}

type uploadPhotoClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadPhotoClient(cc grpc.ClientConnInterface) UploadPhotoClient {
	return &uploadPhotoClient{cc}
}

func (c *uploadPhotoClient) Upload(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/grpc.UploadPhoto/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadPhotoClient) CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*CreateMetadataResponse, error) {
	out := new(CreateMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.UploadPhoto/CreateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadPhotoClient) ImageUploaded(ctx context.Context, in *ImageUploadedRequest, opts ...grpc.CallOption) (*ImageUploadedResponse, error) {
	out := new(ImageUploadedResponse)
	err := c.cc.Invoke(ctx, "/grpc.UploadPhoto/ImageUploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadPhotoServer is the server API for UploadPhoto service.
// All implementations must embed UnimplementedUploadPhotoServer
// for forward compatibility
type UploadPhotoServer interface {
	// RPC for upload a photo to the image database
	Upload(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// RPC for create hashtag-image mapping in the metadata database
	CreateMetadata(context.Context, *CreateMetadataRequest) (*CreateMetadataResponse, error)
	// RPC triggered if the image uploaded (event)
	ImageUploaded(context.Context, *ImageUploadedRequest) (*ImageUploadedResponse, error)
	mustEmbedUnimplementedUploadPhotoServer()
}

// UnimplementedUploadPhotoServer must be embedded to have forward compatible implementations.
type UnimplementedUploadPhotoServer struct {
}

func (UnimplementedUploadPhotoServer) Upload(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUploadPhotoServer) CreateMetadata(context.Context, *CreateMetadataRequest) (*CreateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedUploadPhotoServer) ImageUploaded(context.Context, *ImageUploadedRequest) (*ImageUploadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUploaded not implemented")
}
func (UnimplementedUploadPhotoServer) mustEmbedUnimplementedUploadPhotoServer() {}

// UnsafeUploadPhotoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadPhotoServer will
// result in compilation errors.
type UnsafeUploadPhotoServer interface {
	mustEmbedUnimplementedUploadPhotoServer()
}

func RegisterUploadPhotoServer(s grpc.ServiceRegistrar, srv UploadPhotoServer) {
	s.RegisterService(&UploadPhoto_ServiceDesc, srv)
}

func _UploadPhoto_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadPhotoServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UploadPhoto/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadPhotoServer).Upload(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadPhoto_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadPhotoServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UploadPhoto/CreateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadPhotoServer).CreateMetadata(ctx, req.(*CreateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadPhoto_ImageUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadPhotoServer).ImageUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UploadPhoto/ImageUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadPhotoServer).ImageUploaded(ctx, req.(*ImageUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadPhoto_ServiceDesc is the grpc.ServiceDesc for UploadPhoto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadPhoto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UploadPhoto",
	HandlerType: (*UploadPhotoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _UploadPhoto_Upload_Handler,
		},
		{
			MethodName: "CreateMetadata",
			Handler:    _UploadPhoto_CreateMetadata_Handler,
		},
		{
			MethodName: "ImageUploaded",
			Handler:    _UploadPhoto_ImageUploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/upload.proto",
}
